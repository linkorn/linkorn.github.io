!function(e){function t(n){if(o[n])return o[n].exports;var r=o[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var o={};return t.m=e,t.c=o,t.p="/",t(0)}([function(e,t,o){"use strict";function n(e){if(Array.isArray(e)){for(var t=0,o=Array(e.length);t<e.length;t++)o[t]=e[t];return o}return Array.from(e)}function r(e,t){e.classList?e.classList.add(t):e.className+=" "+t}function l(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}o(1).polyfill(),document.querySelector(".scroll").addEventListener("click",function(e){e.preventDefault();var t=document.querySelector(e.currentTarget.getAttribute("href"));t.scrollIntoView({behavior:"smooth"})});var c=["development","outsourcing","consalting","testing","automation"],i=c.reduce(function(e,t){return e[""+t]=document.querySelector("."+t+" video"),e},{});c.map(function(e){var t=document.querySelector("."+e);t.addEventListener("mouseover",function(){i[""+e].play()}),t.addEventListener("mouseout",function(){i[""+e].pause()});try{i[""+e].play(),setTimeout(function(){return i[""+e].pause()},1e3)}catch(e){}});var a=document.forms[0];[].concat(n(a.querySelectorAll(".fi"))).map(function(e){e.value="",l(e,"has-text"),e.addEventListener("change",function(e){var t=e.currentTarget;""===t.value?l(t,"has-text"):r(t,"has-text")})});var s=null,u=document.getElementById("m-nav");if(document.querySelector(".navigation-button").addEventListener("click",function(e){e.preventDefault(),s||(s=document.querySelector("nav ul"),u.appendChild(s.cloneNode(!0))),r(document.body,"mobile-menu")}),document.getElementById("close-m-nav").addEventListener("click",function(e){e.preventDefault(),l(document.body,"mobile-menu")}),window.Promise){var f=new FormData(a);f.append("ajax","true"),a.addEventListener("submit",function(e){e.preventDefault(),r(a,"blocked"),fetch(a.action,{}).then(function(e){r(a,"sended");var t=document.createElement("div");r(t,"send-ok"),t.innerHTML='Спасибо! Мы вам скоро перезвоним.<br>Еще вы можете написать нам на <a href="mailto:info@linkorn.ru">info@linkorn.ru</a>',a.appendChild(t),document.querySelector(".send-ok").focus()}).catch(l(a,"blocked"))})}},function(e,t,o){!function(t,o,n){"use strict";function r(){function e(e,t){this.scrollLeft=e,this.scrollTop=t}function r(e){return.5*(1-Math.cos(Math.PI*e))}function l(e){if("object"!=typeof e||null===e||e.behavior===n||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior not valid")}function c(e){var n,r,l;do e=e.parentNode,n=e===o.body,r=e.clientHeight<e.scrollHeight||e.clientWidth<e.scrollWidth,l="visible"===t.getComputedStyle(e,null).overflow;while(!n&&(!r||l));return n=r=l=null,e}function i(e){e.frame=t.requestAnimationFrame(i.bind(t,e));var o,n,l,c=d(),a=(c-e.startTime)/u;if(a=a>1?1:a,o=r(a),n=e.startX+(e.x-e.startX)*o,l=e.startY+(e.y-e.startY)*o,e.method.call(e.scrollable,n,l),n===e.x&&l===e.y)return void t.cancelAnimationFrame(e.frame)}function a(n,r,l){var c,a,s,u,m,p=d();n===o.body?(c=t,a=t.scrollX||t.pageXOffset,s=t.scrollY||t.pageYOffset,u=f.scroll):(c=n,a=n.scrollLeft,s=n.scrollTop,u=e),m&&t.cancelAnimationFrame(m),i({scrollable:c,method:u,startTime:p,startX:a,startY:s,x:r,y:l,frame:m})}if(!("scrollBehavior"in o.documentElement.style)){var s=t.HTMLElement||t.Element,u=468,f={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,scrollIntoView:s.prototype.scrollIntoView},d=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now;t.scroll=t.scrollTo=function(){return l(arguments[0])?void f.scroll.call(t,arguments[0].left||arguments[0],arguments[0].top||arguments[1]):void a.call(t,o.body,~~arguments[0].left,~~arguments[0].top)},t.scrollBy=function(){return l(arguments[0])?void f.scrollBy.call(t,arguments[0].left||arguments[0],arguments[0].top||arguments[1]):void a.call(t,o.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset))},s.prototype.scrollIntoView=function(){if(l(arguments[0]))return void f.scrollIntoView.call(this,arguments[0]||!0);var e=c(this),n=e.getBoundingClientRect(),r=this.getBoundingClientRect();e!==o.body?(a.call(this,e,e.scrollLeft+r.left-n.left,e.scrollTop+r.top-n.top),t.scrollBy({left:n.left,top:n.top,behavior:"smooth"})):t.scrollBy({left:r.left,top:r.top,behavior:"smooth"})}}}e.exports={polyfill:r}}(window,document)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,